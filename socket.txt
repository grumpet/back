connected_users = {}
@app.websocket("/ws_send/{user_id}/{token}/{user_id_to}")
async def websocket_endpoint(user_id: str, token: str, user_id_to: str, websocket: WebSocket):
    if not check_user_token_equals(token, user_id):
        await websocket.close()
        raise HTTPException(status_code=401, detail="Incorrect auth")

    await websocket.accept()
    connected_users[user_id] = websocket
    print(connected_users)
    try:
        while True:
            data = await websocket.receive_text()
            # Check if user_id_to is connected
            if user_id_to in connected_users:
                user_ws_to = connected_users[user_id_to]
                await user_ws_to.send_text(data)
            else:
                # Handle the case where user_id_to is not connected
                print(f"User {user_id_to} is not connected.")
    except WebSocketDisconnect:
        del connected_users[user_id]
        await websocket.close()
    except Exception as e:
        print(f"Error: {e}")
        del connected_users[user_id]
        await websocket.close()

@app.websocket("/ws/{user_id}/{token}")
async def websocket_endpoint(user_id: str, websocket: WebSocket):
    await websocket.accept()
    connected_users[user_id] = websocket
    print(connected_users)
    try:
        while True:
            await websocket.receive_text()  # Just receive and discard the message
    except WebSocketDisconnect:
        del connected_users[user_id]
    except Exception as e:
        print(f"Error: {e}")
        del connected_users[user_id]
    finally:
        await websocket.close()
